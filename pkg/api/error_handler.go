// Copyright 2022 European Digital Reading Lab. All rights reserved.
// Use of this source code is governed by a BSD-style license
// specified in the Github project LICENSE file.

package api

import (
	"net/http"

	"github.com/go-chi/render"
)

/*

See Problem Details for HTTP APIs, rfc 7807 : https://tools.ietf.org/html/rfc7807

"type" (string) - A URI reference that identifies the problem type.. Specific types are defined in the Readium License Status Document specification.
"title" (string) - A short, human-readable summary of the problem type.
"status" (number) - The HTTP status code generated by the origin server for this occurrence of the problem.
"detail" (string) - A human-readable explanation specific to this occurrence of the problem.
"instance" (string) - A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.

The server must return  a type and a title in the Problem Details JSON object.

The "about:blank" URI [RFC6694], when used as a problem type, indicates that the problem has no additional semantics beyond that of the HTTP status code.

The server should attempt to localize both title and detail based on the Accept-Language header sent by the client.

Samples of problem details error message:
{
    "type": "about:blank",
    "title": "Resource not found",
}
{
    "type": "http://readium.org/license-status-document/error/notfound",
    "title": "Not Found",
    "status": 404,
    "detail": "Index:Content not found",
}
*/

// Error types defined by the License Status Document specification
const ERROR_BASE_URL = "http://readium.org/license-status-document/error/"
const SERVER_ERROR = ERROR_BASE_URL + "server"
const REGISTER_ERROR = ERROR_BASE_URL + "registration"
const RETURN_ERROR = ERROR_BASE_URL + "return"
const RETURN_EXPIRED = ERROR_BASE_URL + "return/expired" // unused
const RETURN_ALREADY = ERROR_BASE_URL + "return/already" // unused
const RENEW_ERROR = ERROR_BASE_URL + "renew"
const RENEW_DATE = ERROR_BASE_URL + "renew/date" // unused

// Error types defined for this server
const REVOKE_ERROR = ERROR_BASE_URL + "revoke"

// Error response payloads & renderers

// ErrResponse renderer type for handling all sorts of errors.
//
// In the best case scenario, the excellent github.com/pkg/errors package
// helps reveal information on the error, setting it on Err, and in the Render()
// method, using it to set the application-specific error code in AppCode.
type ErrResponse struct {
	//not serialized
	Err            error `json:"-"` // low-level runtime error
	HTTPStatusCode int   `json:"-"` // http response status code
	//mandatory
	Type  string `json:"type"`
	Title string `json:"title"`
	//optional
	Detail   string `json:"detail,omitempty"` // application-level error message
	Instance string `json:"instance,omitempty"`
}

func (e *ErrResponse) Render(w http.ResponseWriter, r *http.Request) error {
	render.Status(r, e.HTTPStatusCode)
	return nil
}

func ErrInvalidRequest(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 400,
		Type:           "about:blank",
		Title:          "Invalid request",
		Detail:         err.Error(),
	}
}

func ErrRender(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 422,
		Type:           "about:blank",
		Title:          "Error rendering response",
		Detail:         err.Error(),
	}
}

func ErrServer(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 500,
		Type:           SERVER_ERROR,
		Title:          "An unexpected error has occurred.",
		Detail:         err.Error(),
	}
}

var ErrNotFound = &ErrResponse{
	HTTPStatusCode: 404,
	Type:           "about:blank",
	Title:          "Resource not found.",
}

func ErrRegister(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 400,
		Type:           REGISTER_ERROR,
		Title:          "Error registering a device.",
		Detail:         err.Error(),
	}
}

func ErrRenew(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 400,
		Type:           RENEW_ERROR,
		Title:          "Error extending a license (renew).",
		Detail:         err.Error(),
	}
}

func ErrReturn(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 400,
		Type:           RETURN_ERROR,
		Title:          "Error returning a license.",
		Detail:         err.Error(),
	}
}

func ErrRevoke(err error) render.Renderer {
	return &ErrResponse{
		Err:            err,
		HTTPStatusCode: 400,
		Type:           REVOKE_ERROR,
		Title:          "Error revoking / cancelling a license.",
		Detail:         err.Error(),
	}
}
